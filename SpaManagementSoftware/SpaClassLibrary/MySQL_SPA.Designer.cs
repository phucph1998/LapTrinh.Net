//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 03/11/2019 20:52:21
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace DbSpaContext
{

    [DatabaseAttribute(Name = "db_spa")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class DbSpaDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(DbSpaDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAccount(Account instance);
        partial void UpdateAccount(Account instance);
        partial void DeleteAccount(Account instance);
        partial void InsertArea(Area instance);
        partial void UpdateArea(Area instance);
        partial void DeleteArea(Area instance);
        partial void InsertBranch(Branch instance);
        partial void UpdateBranch(Branch instance);
        partial void DeleteBranch(Branch instance);
        partial void InsertChair(Chair instance);
        partial void UpdateChair(Chair instance);
        partial void DeleteChair(Chair instance);
        partial void InsertContentItem(ContentItem instance);
        partial void UpdateContentItem(ContentItem instance);
        partial void DeleteContentItem(ContentItem instance);
        partial void InsertDetailEnterCoupon(DetailEnterCoupon instance);
        partial void UpdateDetailEnterCoupon(DetailEnterCoupon instance);
        partial void DeleteDetailEnterCoupon(DetailEnterCoupon instance);
        partial void InsertDetailReceipt(DetailReceipt instance);
        partial void UpdateDetailReceipt(DetailReceipt instance);
        partial void DeleteDetailReceipt(DetailReceipt instance);
        partial void InsertEnterCoupon(EnterCoupon instance);
        partial void UpdateEnterCoupon(EnterCoupon instance);
        partial void DeleteEnterCoupon(EnterCoupon instance);
        partial void InsertGrandRight(GrandRight instance);
        partial void UpdateGrandRight(GrandRight instance);
        partial void DeleteGrandRight(GrandRight instance);
        partial void InsertGroupItem(GroupItem instance);
        partial void UpdateGroupItem(GroupItem instance);
        partial void DeleteGroupItem(GroupItem instance);
        partial void InsertGroupSupplier(GroupSupplier instance);
        partial void UpdateGroupSupplier(GroupSupplier instance);
        partial void DeleteGroupSupplier(GroupSupplier instance);
        partial void InsertGroupUser(GroupUser instance);
        partial void UpdateGroupUser(GroupUser instance);
        partial void DeleteGroupUser(GroupUser instance);
        partial void InsertItem(Item instance);
        partial void UpdateItem(Item instance);
        partial void DeleteItem(Item instance);
        partial void InsertProfileCu(ProfileCu instance);
        partial void UpdateProfileCu(ProfileCu instance);
        partial void DeleteProfileCu(ProfileCu instance);
        partial void InsertReceipt(Receipt instance);
        partial void UpdateReceipt(Receipt instance);
        partial void DeleteReceipt(Receipt instance);
        partial void InsertScreen(Screen instance);
        partial void UpdateScreen(Screen instance);
        partial void DeleteScreen(Screen instance);
        partial void InsertStaff(Staff instance);
        partial void UpdateStaff(Staff instance);
        partial void DeleteStaff(Staff instance);
        partial void InsertSupplier(Supplier instance);
        partial void UpdateSupplier(Supplier instance);
        partial void DeleteSupplier(Supplier instance);
        partial void InsertTypeCu(TypeCu instance);
        partial void UpdateTypeCu(TypeCu instance);
        partial void DeleteTypeCu(TypeCu instance);
        partial void InsertUnitItem(UnitItem instance);
        partial void UpdateUnitItem(UnitItem instance);
        partial void DeleteUnitItem(UnitItem instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        partial void InsertUserGroupUser(UserGroupUser instance);
        partial void UpdateUserGroupUser(UserGroupUser instance);
        partial void DeleteUserGroupUser(UserGroupUser instance);
        partial void InsertUserStaff(UserStaff instance);
        partial void UpdateUserStaff(UserStaff instance);
        partial void DeleteUserStaff(UserStaff instance);

        #endregion

        public DbSpaDataContext() :
        base(GetConnectionString("DbSpaDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public DbSpaDataContext(MappingSource mappingSource) :
        base(GetConnectionString("DbSpaDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public DbSpaDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbSpaDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbSpaDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public DbSpaDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Account> Accounts
        {
            get
            {
                return this.GetTable<Account>();
            }
        }

        public Devart.Data.Linq.Table<Area> Areas
        {
            get
            {
                return this.GetTable<Area>();
            }
        }

        public Devart.Data.Linq.Table<Branch> Branches
        {
            get
            {
                return this.GetTable<Branch>();
            }
        }

        public Devart.Data.Linq.Table<Chair> Chairs
        {
            get
            {
                return this.GetTable<Chair>();
            }
        }

        public Devart.Data.Linq.Table<ContentItem> ContentItems
        {
            get
            {
                return this.GetTable<ContentItem>();
            }
        }

        public Devart.Data.Linq.Table<DetailEnterCoupon> DetailEnterCoupons
        {
            get
            {
                return this.GetTable<DetailEnterCoupon>();
            }
        }

        public Devart.Data.Linq.Table<DetailReceipt> DetailReceipts
        {
            get
            {
                return this.GetTable<DetailReceipt>();
            }
        }

        public Devart.Data.Linq.Table<EnterCoupon> EnterCoupons
        {
            get
            {
                return this.GetTable<EnterCoupon>();
            }
        }

        public Devart.Data.Linq.Table<GrandRight> GrandRights
        {
            get
            {
                return this.GetTable<GrandRight>();
            }
        }

        public Devart.Data.Linq.Table<GroupItem> GroupItems
        {
            get
            {
                return this.GetTable<GroupItem>();
            }
        }

        public Devart.Data.Linq.Table<GroupSupplier> GroupSuppliers
        {
            get
            {
                return this.GetTable<GroupSupplier>();
            }
        }

        public Devart.Data.Linq.Table<GroupUser> GroupUsers
        {
            get
            {
                return this.GetTable<GroupUser>();
            }
        }

        public Devart.Data.Linq.Table<Item> Items
        {
            get
            {
                return this.GetTable<Item>();
            }
        }

        public Devart.Data.Linq.Table<ProfileCu> ProfileCus
        {
            get
            {
                return this.GetTable<ProfileCu>();
            }
        }

        public Devart.Data.Linq.Table<Receipt> Receipts
        {
            get
            {
                return this.GetTable<Receipt>();
            }
        }

        public Devart.Data.Linq.Table<Screen> Screens
        {
            get
            {
                return this.GetTable<Screen>();
            }
        }

        public Devart.Data.Linq.Table<Staff> Staffs
        {
            get
            {
                return this.GetTable<Staff>();
            }
        }

        public Devart.Data.Linq.Table<Supplier> Suppliers
        {
            get
            {
                return this.GetTable<Supplier>();
            }
        }

        public Devart.Data.Linq.Table<TypeCu> TypeCus
        {
            get
            {
                return this.GetTable<TypeCu>();
            }
        }

        public Devart.Data.Linq.Table<UnitItem> UnitItems
        {
            get
            {
                return this.GetTable<UnitItem>();
            }
        }

        public Devart.Data.Linq.Table<User> Users
        {
            get
            {
                return this.GetTable<User>();
            }
        }

        public Devart.Data.Linq.Table<UserGroupUser> UserGroupUsers
        {
            get
            {
                return this.GetTable<UserGroupUser>();
            }
        }

        public Devart.Data.Linq.Table<UserStaff> UserStaffs
        {
            get
            {
                return this.GetTable<UserStaff>();
            }
        }
    }
}

namespace DbSpaContext
{

    /// <summary>
    /// There are no comments for DbSpaContext.Account in the schema.
    /// </summary>
    [Table(Name = @"db_spa.account")]
    public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _IDPROFILE;

        private string _USERNAME;

        private string _PASSWORD;

        private string _FACEBOOKID;

        private string _TOKENFACE;

        private string _TYPEUSER;

        private string _TOKENLOGIN;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<ProfileCu> _ProfileCu;

        private EntitySet<Receipt> _Receipts;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDPROFILEChanging(int? value);
        partial void OnIDPROFILEChanged();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnPASSWORDChanging(string value);
        partial void OnPASSWORDChanged();
        partial void OnFACEBOOKIDChanging(string value);
        partial void OnFACEBOOKIDChanged();
        partial void OnTOKENFACEChanging(string value);
        partial void OnTOKENFACEChanged();
        partial void OnTYPEUSERChanging(string value);
        partial void OnTYPEUSERChanged();
        partial void OnTOKENLOGINChanging(string value);
        partial void OnTOKENLOGINChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public Account()
        {
            this._ProfileCu  = default(EntityRef<ProfileCu>);
            this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDPROFILE in the schema.
        /// </summary>
        [Column(Name = @"ID_PROFILE", Storage = "_IDPROFILE", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDPROFILE
        {
            get
            {
                return this._IDPROFILE;
            }
            set
            {
                if (this._IDPROFILE != value)
                {
                    if (this._ProfileCu.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDPROFILEChanging(value);
                    this.SendPropertyChanging("IDPROFILE");
                    this._IDPROFILE = value;
                    this.SendPropertyChanged("IDPROFILE");
                    this.OnIDPROFILEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for USERNAME in the schema.
        /// </summary>
        [Column(Name = @"USER_NAME", Storage = "_USERNAME", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging("USERNAME");
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PASSWORD in the schema.
        /// </summary>
        [Column(Name = @"`PASSWORD`", Storage = "_PASSWORD", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PASSWORD
        {
            get
            {
                return this._PASSWORD;
            }
            set
            {
                if (this._PASSWORD != value)
                {
                    this.OnPASSWORDChanging(value);
                    this.SendPropertyChanging("PASSWORD");
                    this._PASSWORD = value;
                    this.SendPropertyChanged("PASSWORD");
                    this.OnPASSWORDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FACEBOOKID in the schema.
        /// </summary>
        [Column(Storage = "_FACEBOOKID", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string FACEBOOKID
        {
            get
            {
                return this._FACEBOOKID;
            }
            set
            {
                if (this._FACEBOOKID != value)
                {
                    this.OnFACEBOOKIDChanging(value);
                    this.SendPropertyChanging("FACEBOOKID");
                    this._FACEBOOKID = value;
                    this.SendPropertyChanged("FACEBOOKID");
                    this.OnFACEBOOKIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TOKENFACE in the schema.
        /// </summary>
        [Column(Name = @"TOKEN_FACE", Storage = "_TOKENFACE", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TOKENFACE
        {
            get
            {
                return this._TOKENFACE;
            }
            set
            {
                if (this._TOKENFACE != value)
                {
                    this.OnTOKENFACEChanging(value);
                    this.SendPropertyChanging("TOKENFACE");
                    this._TOKENFACE = value;
                    this.SendPropertyChanged("TOKENFACE");
                    this.OnTOKENFACEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TYPEUSER in the schema.
        /// </summary>
        [Column(Name = @"TYPE_USER", Storage = "_TYPEUSER", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TYPEUSER
        {
            get
            {
                return this._TYPEUSER;
            }
            set
            {
                if (this._TYPEUSER != value)
                {
                    this.OnTYPEUSERChanging(value);
                    this.SendPropertyChanging("TYPEUSER");
                    this._TYPEUSER = value;
                    this.SendPropertyChanged("TYPEUSER");
                    this.OnTYPEUSERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TOKENLOGIN in the schema.
        /// </summary>
        [Column(Name = @"TOKEN_LOGIN", Storage = "_TOKENLOGIN", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string TOKENLOGIN
        {
            get
            {
                return this._TOKENLOGIN;
            }
            set
            {
                if (this._TOKENLOGIN != value)
                {
                    this.OnTOKENLOGINChanging(value);
                    this.SendPropertyChanging("TOKENLOGIN");
                    this._TOKENLOGIN = value;
                    this.SendPropertyChanged("TOKENLOGIN");
                    this.OnTOKENLOGINChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileCu in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProfileCu_Account", Storage="_ProfileCu", ThisKey="IDPROFILE", OtherKey="IDPROFILE", IsForeignKey=true)]
        public ProfileCu ProfileCu
        {
            get
            {
                return this._ProfileCu.Entity;
            }
            set
            {
                ProfileCu previousValue = this._ProfileCu.Entity;
                if ((previousValue != value) || (this._ProfileCu.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("ProfileCu");
                    if (previousValue != null)
                    {
                        this._ProfileCu.Entity = null;
                        previousValue.Accounts.Remove(this);
                    }
                    this._ProfileCu.Entity = value;
                    if (value != null)
                    {
                        this._IDPROFILE = value.IDPROFILE;
                        value.Accounts.Add(this);
                    }
                    else
                    {
                        this._IDPROFILE = default(int?);
                    }
                    this.SendPropertyChanged("ProfileCu");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Receipts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_Receipt", Storage="_Receipts", ThisKey="ID", OtherKey="IDACCOUNT", DeleteRule="RESTRICT")]
        public EntitySet<Receipt> Receipts
        {
            get
            {
                return this._Receipts;
            }
            set
            {
                this._Receipts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Receipts(Receipt entity)
        {
            this.SendPropertyChanging("Receipts");
            entity.Account = this;
        }
    
        private void detach_Receipts(Receipt entity)
        {
            this.SendPropertyChanging("Receipts");
            entity.Account = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Area in the schema.
    /// </summary>
    [Table(Name = @"db_spa.area")]
    public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _IDBRACNH;

        private string _NAME;

        private int? _NUMBERCHAIR;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<Branch> _Branch;

        private EntitySet<Chair> _Chairs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDBRACNHChanging(int? value);
        partial void OnIDBRACNHChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnNUMBERCHAIRChanging(int? value);
        partial void OnNUMBERCHAIRChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public Area()
        {
            this._Branch  = default(EntityRef<Branch>);
            this._Chairs = new EntitySet<Chair>(new Action<Chair>(this.attach_Chairs), new Action<Chair>(this.detach_Chairs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDBRACNH in the schema.
        /// </summary>
        [Column(Name = @"ID_BRACNH", Storage = "_IDBRACNH", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDBRACNH
        {
            get
            {
                return this._IDBRACNH;
            }
            set
            {
                if (this._IDBRACNH != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDBRACNHChanging(value);
                    this.SendPropertyChanging("IDBRACNH");
                    this._IDBRACNH = value;
                    this.SendPropertyChanged("IDBRACNH");
                    this.OnIDBRACNHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NUMBERCHAIR in the schema.
        /// </summary>
        [Column(Name = @"NUMBER_CHAIR", Storage = "_NUMBERCHAIR", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? NUMBERCHAIR
        {
            get
            {
                return this._NUMBERCHAIR;
            }
            set
            {
                if (this._NUMBERCHAIR != value)
                {
                    this.OnNUMBERCHAIRChanging(value);
                    this.SendPropertyChanging("NUMBERCHAIR");
                    this._NUMBERCHAIR = value;
                    this.SendPropertyChanged("NUMBERCHAIR");
                    this.OnNUMBERCHAIRChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Area", Storage="_Branch", ThisKey="IDBRACNH", OtherKey="ID", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.Areas.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._IDBRACNH = value.ID;
                        value.Areas.Add(this);
                    }
                    else
                    {
                        this._IDBRACNH = default(int?);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Chairs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Area_Chair", Storage="_Chairs", ThisKey="ID", OtherKey="IDAREA", DeleteRule="RESTRICT")]
        public EntitySet<Chair> Chairs
        {
            get
            {
                return this._Chairs;
            }
            set
            {
                this._Chairs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Chairs(Chair entity)
        {
            this.SendPropertyChanging("Chairs");
            entity.Area = this;
        }
    
        private void detach_Chairs(Chair entity)
        {
            this.SendPropertyChanging("Chairs");
            entity.Area = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Branch in the schema.
    /// </summary>
    [Table(Name = @"db_spa.branch")]
    public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAME;

        private byte[] _IMAGE;

        private string _ADDRESS;

        private string _PHONE;

        private string _EMAIL;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<Area> _Areas;

        private EntitySet<UserStaff> _UserStaffs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnIMAGEChanging(byte[] value);
        partial void OnIMAGEChanged();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnPHONEChanging(string value);
        partial void OnPHONEChanged();
        partial void OnEMAILChanging(string value);
        partial void OnEMAILChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public Branch()
        {
            this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
            this._UserStaffs = new EntitySet<UserStaff>(new Action<UserStaff>(this.attach_UserStaffs), new Action<UserStaff>(this.detach_UserStaffs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "MEDIUMTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IMAGE in the schema.
        /// </summary>
        [Column(Storage = "_IMAGE", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] IMAGE
        {
            get
            {
                return this._IMAGE;
            }
            set
            {
                if (this._IMAGE != value)
                {
                    this.OnIMAGEChanging(value);
                    this.SendPropertyChanging("IMAGE");
                    this._IMAGE = value;
                    this.SendPropertyChanged("IMAGE");
                    this.OnIMAGEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ADDRESS in the schema.
        /// </summary>
        [Column(Storage = "_ADDRESS", DbType = "MEDIUMTEXT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ADDRESS
        {
            get
            {
                return this._ADDRESS;
            }
            set
            {
                if (this._ADDRESS != value)
                {
                    this.OnADDRESSChanging(value);
                    this.SendPropertyChanging("ADDRESS");
                    this._ADDRESS = value;
                    this.SendPropertyChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHONE in the schema.
        /// </summary>
        [Column(Storage = "_PHONE", DbType = "CHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PHONE
        {
            get
            {
                return this._PHONE;
            }
            set
            {
                if (this._PHONE != value)
                {
                    this.OnPHONEChanging(value);
                    this.SendPropertyChanging("PHONE");
                    this._PHONE = value;
                    this.SendPropertyChanged("PHONE");
                    this.OnPHONEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAIL in the schema.
        /// </summary>
        [Column(Storage = "_EMAIL", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAIL
        {
            get
            {
                return this._EMAIL;
            }
            set
            {
                if (this._EMAIL != value)
                {
                    this.OnEMAILChanging(value);
                    this.SendPropertyChanging("EMAIL");
                    this._EMAIL = value;
                    this.SendPropertyChanged("EMAIL");
                    this.OnEMAILChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Areas in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_Area", Storage="_Areas", ThisKey="ID", OtherKey="IDBRACNH", DeleteRule="RESTRICT")]
        public EntitySet<Area> Areas
        {
            get
            {
                return this._Areas;
            }
            set
            {
                this._Areas.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_UserStaff", Storage="_UserStaffs", ThisKey="ID", OtherKey="IDBRANCH", DeleteRule="RESTRICT")]
        public EntitySet<UserStaff> UserStaffs
        {
            get
            {
                return this._UserStaffs;
            }
            set
            {
                this._UserStaffs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Areas(Area entity)
        {
            this.SendPropertyChanging("Areas");
            entity.Branch = this;
        }
    
        private void detach_Areas(Area entity)
        {
            this.SendPropertyChanging("Areas");
            entity.Branch = null;
        }

        private void attach_UserStaffs(UserStaff entity)
        {
            this.SendPropertyChanging("UserStaffs");
            entity.Branch = this;
        }
    
        private void detach_UserStaffs(UserStaff entity)
        {
            this.SendPropertyChanging("UserStaffs");
            entity.Branch = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Chair in the schema.
    /// </summary>
    [Table(Name = @"db_spa.chair")]
    public partial class Chair : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _IDAREA;

        private string _NAME;

        private byte[] _IMAGE;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<Area> _Area;

        private EntitySet<Receipt> _Receipts;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDAREAChanging(int? value);
        partial void OnIDAREAChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnIMAGEChanging(byte[] value);
        partial void OnIMAGEChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public Chair()
        {
            this._Area  = default(EntityRef<Area>);
            this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDAREA in the schema.
        /// </summary>
        [Column(Name = @"ID_AREA", Storage = "_IDAREA", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDAREA
        {
            get
            {
                return this._IDAREA;
            }
            set
            {
                if (this._IDAREA != value)
                {
                    if (this._Area.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDAREAChanging(value);
                    this.SendPropertyChanging("IDAREA");
                    this._IDAREA = value;
                    this.SendPropertyChanged("IDAREA");
                    this.OnIDAREAChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IMAGE in the schema.
        /// </summary>
        [Column(Storage = "_IMAGE", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] IMAGE
        {
            get
            {
                return this._IMAGE;
            }
            set
            {
                if (this._IMAGE != value)
                {
                    this.OnIMAGEChanging(value);
                    this.SendPropertyChanging("IMAGE");
                    this._IMAGE = value;
                    this.SendPropertyChanged("IMAGE");
                    this.OnIMAGEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Area in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Area_Chair", Storage="_Area", ThisKey="IDAREA", OtherKey="ID", IsForeignKey=true)]
        public Area Area
        {
            get
            {
                return this._Area.Entity;
            }
            set
            {
                Area previousValue = this._Area.Entity;
                if ((previousValue != value) || (this._Area.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Area");
                    if (previousValue != null)
                    {
                        this._Area.Entity = null;
                        previousValue.Chairs.Remove(this);
                    }
                    this._Area.Entity = value;
                    if (value != null)
                    {
                        this._IDAREA = value.ID;
                        value.Chairs.Add(this);
                    }
                    else
                    {
                        this._IDAREA = default(int?);
                    }
                    this.SendPropertyChanged("Area");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Receipts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Chair_Receipt", Storage="_Receipts", ThisKey="ID", OtherKey="IDCHAIR", DeleteRule="RESTRICT")]
        public EntitySet<Receipt> Receipts
        {
            get
            {
                return this._Receipts;
            }
            set
            {
                this._Receipts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Receipts(Receipt entity)
        {
            this.SendPropertyChanging("Receipts");
            entity.Chair = this;
        }
    
        private void detach_Receipts(Receipt entity)
        {
            this.SendPropertyChanging("Receipts");
            entity.Chair = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.ContentItem in the schema.
    /// </summary>
    [Table(Name = @"db_spa.content_item")]
    public partial class ContentItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IDITEM;

        private int _IDITEMCONTENT;

        private int? _NUMBER;
        #pragma warning restore 0649

        private EntityRef<Item> _Item_IDITEM;

        private EntityRef<Item> _Item_IDITEMCONTENT;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDITEMChanging(int value);
        partial void OnIDITEMChanged();
        partial void OnIDITEMCONTENTChanging(int value);
        partial void OnIDITEMCONTENTChanged();
        partial void OnNUMBERChanging(int? value);
        partial void OnNUMBERChanged();
        #endregion

        public ContentItem()
        {
            this._Item_IDITEM  = default(EntityRef<Item>);
            this._Item_IDITEMCONTENT  = default(EntityRef<Item>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IDITEM in the schema.
        /// </summary>
        [Column(Name = @"ID_ITEM", Storage = "_IDITEM", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDITEM
        {
            get
            {
                return this._IDITEM;
            }
            set
            {
                if (this._IDITEM != value)
                {
                    if (this._Item_IDITEM.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDITEMChanging(value);
                    this.SendPropertyChanging("IDITEM");
                    this._IDITEM = value;
                    this.SendPropertyChanged("IDITEM");
                    this.OnIDITEMChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDITEMCONTENT in the schema.
        /// </summary>
        [Column(Name = @"ID_ITEM_CONTENT", Storage = "_IDITEMCONTENT", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDITEMCONTENT
        {
            get
            {
                return this._IDITEMCONTENT;
            }
            set
            {
                if (this._IDITEMCONTENT != value)
                {
                    if (this._Item_IDITEMCONTENT.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDITEMCONTENTChanging(value);
                    this.SendPropertyChanging("IDITEMCONTENT");
                    this._IDITEMCONTENT = value;
                    this.SendPropertyChanged("IDITEMCONTENT");
                    this.OnIDITEMCONTENTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NUMBER in the schema.
        /// </summary>
        [Column(Storage = "_NUMBER", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? NUMBER
        {
            get
            {
                return this._NUMBER;
            }
            set
            {
                if (this._NUMBER != value)
                {
                    this.OnNUMBERChanging(value);
                    this.SendPropertyChanging("NUMBER");
                    this._NUMBER = value;
                    this.SendPropertyChanged("NUMBER");
                    this.OnNUMBERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Item_IDITEM in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_ContentItem", Storage="_Item_IDITEM", ThisKey="IDITEM", OtherKey="ID", IsForeignKey=true)]
        public Item Item_IDITEM
        {
            get
            {
                return this._Item_IDITEM.Entity;
            }
            set
            {
                Item previousValue = this._Item_IDITEM.Entity;
                if ((previousValue != value) || (this._Item_IDITEM.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Item_IDITEM");
                    if (previousValue != null)
                    {
                        this._Item_IDITEM.Entity = null;
                        previousValue.ContentItems_IDITEM.Remove(this);
                    }
                    this._Item_IDITEM.Entity = value;
                    if (value != null)
                    {
                        this._IDITEM = value.ID;
                        value.ContentItems_IDITEM.Add(this);
                    }
                    else
                    {
                        this._IDITEM = default(int);
                    }
                    this.SendPropertyChanged("Item_IDITEM");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Item_IDITEMCONTENT in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_ContentItem1", Storage="_Item_IDITEMCONTENT", ThisKey="IDITEMCONTENT", OtherKey="ID", IsForeignKey=true)]
        public Item Item_IDITEMCONTENT
        {
            get
            {
                return this._Item_IDITEMCONTENT.Entity;
            }
            set
            {
                Item previousValue = this._Item_IDITEMCONTENT.Entity;
                if ((previousValue != value) || (this._Item_IDITEMCONTENT.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Item_IDITEMCONTENT");
                    if (previousValue != null)
                    {
                        this._Item_IDITEMCONTENT.Entity = null;
                        previousValue.ContentItems_IDITEMCONTENT.Remove(this);
                    }
                    this._Item_IDITEMCONTENT.Entity = value;
                    if (value != null)
                    {
                        this._IDITEMCONTENT = value.ID;
                        value.ContentItems_IDITEMCONTENT.Add(this);
                    }
                    else
                    {
                        this._IDITEMCONTENT = default(int);
                    }
                    this.SendPropertyChanged("Item_IDITEMCONTENT");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.DetailEnterCoupon in the schema.
    /// </summary>
    [Table(Name = @"db_spa.detail_enter_coupon")]
    public partial class DetailEnterCoupon : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IDENTERCOUPON;

        private int _IDITEM;

        private string _NAMEITEM;

        private int? _NUMBER;

        private float? _INTOMONEY;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<EnterCoupon> _EnterCoupon;

        private EntityRef<Item> _Item;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDENTERCOUPONChanging(int value);
        partial void OnIDENTERCOUPONChanged();
        partial void OnIDITEMChanging(int value);
        partial void OnIDITEMChanged();
        partial void OnNAMEITEMChanging(string value);
        partial void OnNAMEITEMChanged();
        partial void OnNUMBERChanging(int? value);
        partial void OnNUMBERChanged();
        partial void OnINTOMONEYChanging(float? value);
        partial void OnINTOMONEYChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public DetailEnterCoupon()
        {
            this._EnterCoupon  = default(EntityRef<EnterCoupon>);
            this._Item  = default(EntityRef<Item>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IDENTERCOUPON in the schema.
        /// </summary>
        [Column(Name = @"ID_ENTER_COUPON", Storage = "_IDENTERCOUPON", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDENTERCOUPON
        {
            get
            {
                return this._IDENTERCOUPON;
            }
            set
            {
                if (this._IDENTERCOUPON != value)
                {
                    if (this._EnterCoupon.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDENTERCOUPONChanging(value);
                    this.SendPropertyChanging("IDENTERCOUPON");
                    this._IDENTERCOUPON = value;
                    this.SendPropertyChanged("IDENTERCOUPON");
                    this.OnIDENTERCOUPONChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDITEM in the schema.
        /// </summary>
        [Column(Name = @"ID_ITEM", Storage = "_IDITEM", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDITEM
        {
            get
            {
                return this._IDITEM;
            }
            set
            {
                if (this._IDITEM != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDITEMChanging(value);
                    this.SendPropertyChanging("IDITEM");
                    this._IDITEM = value;
                    this.SendPropertyChanged("IDITEM");
                    this.OnIDITEMChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAMEITEM in the schema.
        /// </summary>
        [Column(Name = @"NAME_ITEM", Storage = "_NAMEITEM", CanBeNull = false, DbType = "MEDIUMTEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAMEITEM
        {
            get
            {
                return this._NAMEITEM;
            }
            set
            {
                if (this._NAMEITEM != value)
                {
                    this.OnNAMEITEMChanging(value);
                    this.SendPropertyChanging("NAMEITEM");
                    this._NAMEITEM = value;
                    this.SendPropertyChanged("NAMEITEM");
                    this.OnNAMEITEMChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NUMBER in the schema.
        /// </summary>
        [Column(Storage = "_NUMBER", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? NUMBER
        {
            get
            {
                return this._NUMBER;
            }
            set
            {
                if (this._NUMBER != value)
                {
                    this.OnNUMBERChanging(value);
                    this.SendPropertyChanging("NUMBER");
                    this._NUMBER = value;
                    this.SendPropertyChanged("NUMBER");
                    this.OnNUMBERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for INTOMONEY in the schema.
        /// </summary>
        [Column(Name = @"INTO_MONEY", Storage = "_INTOMONEY", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? INTOMONEY
        {
            get
            {
                return this._INTOMONEY;
            }
            set
            {
                if (this._INTOMONEY != value)
                {
                    this.OnINTOMONEYChanging(value);
                    this.SendPropertyChanging("INTOMONEY");
                    this._INTOMONEY = value;
                    this.SendPropertyChanged("INTOMONEY");
                    this.OnINTOMONEYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterCoupon in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EnterCoupon_DetailEnterCoupon", Storage="_EnterCoupon", ThisKey="IDENTERCOUPON", OtherKey="ID", IsForeignKey=true)]
        public EnterCoupon EnterCoupon
        {
            get
            {
                return this._EnterCoupon.Entity;
            }
            set
            {
                EnterCoupon previousValue = this._EnterCoupon.Entity;
                if ((previousValue != value) || (this._EnterCoupon.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("EnterCoupon");
                    if (previousValue != null)
                    {
                        this._EnterCoupon.Entity = null;
                        previousValue.DetailEnterCoupons.Remove(this);
                    }
                    this._EnterCoupon.Entity = value;
                    if (value != null)
                    {
                        this._IDENTERCOUPON = value.ID;
                        value.DetailEnterCoupons.Add(this);
                    }
                    else
                    {
                        this._IDENTERCOUPON = default(int);
                    }
                    this.SendPropertyChanged("EnterCoupon");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Item in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_DetailEnterCoupon", Storage="_Item", ThisKey="IDITEM", OtherKey="ID", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Item");
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.DetailEnterCoupons.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        this._IDITEM = value.ID;
                        value.DetailEnterCoupons.Add(this);
                    }
                    else
                    {
                        this._IDITEM = default(int);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.DetailReceipt in the schema.
    /// </summary>
    [Table(Name = @"db_spa.detail_receipt")]
    public partial class DetailReceipt : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IDRECEIPT;

        private int _IDSTAFF;

        private int _IDITEM;

        private int? _NUMBER;

        private float? _INTOMONEY;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<Item> _Item;

        private EntityRef<Receipt> _Receipt;

        private EntityRef<Staff> _Staff;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDRECEIPTChanging(int value);
        partial void OnIDRECEIPTChanged();
        partial void OnIDSTAFFChanging(int value);
        partial void OnIDSTAFFChanged();
        partial void OnIDITEMChanging(int value);
        partial void OnIDITEMChanged();
        partial void OnNUMBERChanging(int? value);
        partial void OnNUMBERChanged();
        partial void OnINTOMONEYChanging(float? value);
        partial void OnINTOMONEYChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public DetailReceipt()
        {
            this._Item  = default(EntityRef<Item>);
            this._Receipt  = default(EntityRef<Receipt>);
            this._Staff  = default(EntityRef<Staff>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IDRECEIPT in the schema.
        /// </summary>
        [Column(Name = @"ID_RECEIPT", Storage = "_IDRECEIPT", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDRECEIPT
        {
            get
            {
                return this._IDRECEIPT;
            }
            set
            {
                if (this._IDRECEIPT != value)
                {
                    if (this._Receipt.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDRECEIPTChanging(value);
                    this.SendPropertyChanging("IDRECEIPT");
                    this._IDRECEIPT = value;
                    this.SendPropertyChanged("IDRECEIPT");
                    this.OnIDRECEIPTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDSTAFF in the schema.
        /// </summary>
        [Column(Name = @"ID_STAFF", Storage = "_IDSTAFF", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDSTAFF
        {
            get
            {
                return this._IDSTAFF;
            }
            set
            {
                if (this._IDSTAFF != value)
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDSTAFFChanging(value);
                    this.SendPropertyChanging("IDSTAFF");
                    this._IDSTAFF = value;
                    this.SendPropertyChanged("IDSTAFF");
                    this.OnIDSTAFFChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDITEM in the schema.
        /// </summary>
        [Column(Name = @"ID_ITEM", Storage = "_IDITEM", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDITEM
        {
            get
            {
                return this._IDITEM;
            }
            set
            {
                if (this._IDITEM != value)
                {
                    if (this._Item.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDITEMChanging(value);
                    this.SendPropertyChanging("IDITEM");
                    this._IDITEM = value;
                    this.SendPropertyChanged("IDITEM");
                    this.OnIDITEMChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NUMBER in the schema.
        /// </summary>
        [Column(Storage = "_NUMBER", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? NUMBER
        {
            get
            {
                return this._NUMBER;
            }
            set
            {
                if (this._NUMBER != value)
                {
                    this.OnNUMBERChanging(value);
                    this.SendPropertyChanging("NUMBER");
                    this._NUMBER = value;
                    this.SendPropertyChanged("NUMBER");
                    this.OnNUMBERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for INTOMONEY in the schema.
        /// </summary>
        [Column(Name = @"INTO_MONEY", Storage = "_INTOMONEY", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? INTOMONEY
        {
            get
            {
                return this._INTOMONEY;
            }
            set
            {
                if (this._INTOMONEY != value)
                {
                    this.OnINTOMONEYChanging(value);
                    this.SendPropertyChanging("INTOMONEY");
                    this._INTOMONEY = value;
                    this.SendPropertyChanged("INTOMONEY");
                    this.OnINTOMONEYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Item in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_DetailReceipt", Storage="_Item", ThisKey="IDITEM", OtherKey="ID", IsForeignKey=true)]
        public Item Item
        {
            get
            {
                return this._Item.Entity;
            }
            set
            {
                Item previousValue = this._Item.Entity;
                if ((previousValue != value) || (this._Item.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Item");
                    if (previousValue != null)
                    {
                        this._Item.Entity = null;
                        previousValue.DetailReceipts.Remove(this);
                    }
                    this._Item.Entity = value;
                    if (value != null)
                    {
                        this._IDITEM = value.ID;
                        value.DetailReceipts.Add(this);
                    }
                    else
                    {
                        this._IDITEM = default(int);
                    }
                    this.SendPropertyChanged("Item");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Receipt in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Receipt_DetailReceipt", Storage="_Receipt", ThisKey="IDRECEIPT", OtherKey="ID", IsForeignKey=true)]
        public Receipt Receipt
        {
            get
            {
                return this._Receipt.Entity;
            }
            set
            {
                Receipt previousValue = this._Receipt.Entity;
                if ((previousValue != value) || (this._Receipt.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Receipt");
                    if (previousValue != null)
                    {
                        this._Receipt.Entity = null;
                        previousValue.DetailReceipts.Remove(this);
                    }
                    this._Receipt.Entity = value;
                    if (value != null)
                    {
                        this._IDRECEIPT = value.ID;
                        value.DetailReceipts.Add(this);
                    }
                    else
                    {
                        this._IDRECEIPT = default(int);
                    }
                    this.SendPropertyChanged("Receipt");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_DetailReceipt", Storage="_Staff", ThisKey="IDSTAFF", OtherKey="ID", IsForeignKey=true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if ((previousValue != value) || (this._Staff.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Staff");
                    if (previousValue != null)
                    {
                        this._Staff.Entity = null;
                        previousValue.DetailReceipts.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if (value != null)
                    {
                        this._IDSTAFF = value.ID;
                        value.DetailReceipts.Add(this);
                    }
                    else
                    {
                        this._IDSTAFF = default(int);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.EnterCoupon in the schema.
    /// </summary>
    [Table(Name = @"db_spa.enter_coupon")]
    public partial class EnterCoupon : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _IDSUPPLIER;

        private int? _IDSTAFF;

        private string _IDUSER;

        private System.DateTime? _CREATEDATE;

        private string _RESONENTER;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<DetailEnterCoupon> _DetailEnterCoupons;

        private EntityRef<Staff> _Staff;

        private EntityRef<Supplier> _Supplier;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDSUPPLIERChanging(int? value);
        partial void OnIDSUPPLIERChanged();
        partial void OnIDSTAFFChanging(int? value);
        partial void OnIDSTAFFChanged();
        partial void OnIDUSERChanging(string value);
        partial void OnIDUSERChanged();
        partial void OnCREATEDATEChanging(System.DateTime? value);
        partial void OnCREATEDATEChanged();
        partial void OnRESONENTERChanging(string value);
        partial void OnRESONENTERChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public EnterCoupon()
        {
            this._DetailEnterCoupons = new EntitySet<DetailEnterCoupon>(new Action<DetailEnterCoupon>(this.attach_DetailEnterCoupons), new Action<DetailEnterCoupon>(this.detach_DetailEnterCoupons));
            this._Staff  = default(EntityRef<Staff>);
            this._Supplier  = default(EntityRef<Supplier>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDSUPPLIER in the schema.
        /// </summary>
        [Column(Name = @"ID_SUPPLIER", Storage = "_IDSUPPLIER", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDSUPPLIER
        {
            get
            {
                return this._IDSUPPLIER;
            }
            set
            {
                if (this._IDSUPPLIER != value)
                {
                    if (this._Supplier.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDSUPPLIERChanging(value);
                    this.SendPropertyChanging("IDSUPPLIER");
                    this._IDSUPPLIER = value;
                    this.SendPropertyChanged("IDSUPPLIER");
                    this.OnIDSUPPLIERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDSTAFF in the schema.
        /// </summary>
        [Column(Name = @"ID_STAFF", Storage = "_IDSTAFF", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDSTAFF
        {
            get
            {
                return this._IDSTAFF;
            }
            set
            {
                if (this._IDSTAFF != value)
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDSTAFFChanging(value);
                    this.SendPropertyChanging("IDSTAFF");
                    this._IDSTAFF = value;
                    this.SendPropertyChanged("IDSTAFF");
                    this.OnIDSTAFFChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDUSER in the schema.
        /// </summary>
        [Column(Name = @"ID_USER", Storage = "_IDUSER", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string IDUSER
        {
            get
            {
                return this._IDUSER;
            }
            set
            {
                if (this._IDUSER != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDUSERChanging(value);
                    this.SendPropertyChanging("IDUSER");
                    this._IDUSER = value;
                    this.SendPropertyChanged("IDUSER");
                    this.OnIDUSERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CREATEDATE in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CREATEDATE", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CREATEDATE
        {
            get
            {
                return this._CREATEDATE;
            }
            set
            {
                if (this._CREATEDATE != value)
                {
                    this.OnCREATEDATEChanging(value);
                    this.SendPropertyChanging("CREATEDATE");
                    this._CREATEDATE = value;
                    this.SendPropertyChanged("CREATEDATE");
                    this.OnCREATEDATEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RESONENTER in the schema.
        /// </summary>
        [Column(Name = @"RESON_ENTER", Storage = "_RESONENTER", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string RESONENTER
        {
            get
            {
                return this._RESONENTER;
            }
            set
            {
                if (this._RESONENTER != value)
                {
                    this.OnRESONENTERChanging(value);
                    this.SendPropertyChanging("RESONENTER");
                    this._RESONENTER = value;
                    this.SendPropertyChanged("RESONENTER");
                    this.OnRESONENTERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DetailEnterCoupons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="EnterCoupon_DetailEnterCoupon", Storage="_DetailEnterCoupons", ThisKey="ID", OtherKey="IDENTERCOUPON", DeleteRule="RESTRICT")]
        public EntitySet<DetailEnterCoupon> DetailEnterCoupons
        {
            get
            {
                return this._DetailEnterCoupons;
            }
            set
            {
                this._DetailEnterCoupons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_EnterCoupon", Storage="_Staff", ThisKey="IDSTAFF", OtherKey="ID", IsForeignKey=true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if ((previousValue != value) || (this._Staff.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Staff");
                    if (previousValue != null)
                    {
                        this._Staff.Entity = null;
                        previousValue.EnterCoupons.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if (value != null)
                    {
                        this._IDSTAFF = value.ID;
                        value.EnterCoupons.Add(this);
                    }
                    else
                    {
                        this._IDSTAFF = default(int?);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Supplier in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Supplier_EnterCoupon", Storage="_Supplier", ThisKey="IDSUPPLIER", OtherKey="ID", IsForeignKey=true)]
        public Supplier Supplier
        {
            get
            {
                return this._Supplier.Entity;
            }
            set
            {
                Supplier previousValue = this._Supplier.Entity;
                if ((previousValue != value) || (this._Supplier.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Supplier");
                    if (previousValue != null)
                    {
                        this._Supplier.Entity = null;
                        previousValue.EnterCoupons.Remove(this);
                    }
                    this._Supplier.Entity = value;
                    if (value != null)
                    {
                        this._IDSUPPLIER = value.ID;
                        value.EnterCoupons.Add(this);
                    }
                    else
                    {
                        this._IDSUPPLIER = default(int?);
                    }
                    this.SendPropertyChanged("Supplier");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_EnterCoupon", Storage="_User", ThisKey="IDUSER", OtherKey="USERNAME", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.EnterCoupons.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._IDUSER = value.USERNAME;
                        value.EnterCoupons.Add(this);
                    }
                    else
                    {
                        this._IDUSER = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DetailEnterCoupons(DetailEnterCoupon entity)
        {
            this.SendPropertyChanging("DetailEnterCoupons");
            entity.EnterCoupon = this;
        }
    
        private void detach_DetailEnterCoupons(DetailEnterCoupon entity)
        {
            this.SendPropertyChanging("DetailEnterCoupons");
            entity.EnterCoupon = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.GrandRight in the schema.
    /// </summary>
    [Table(Name = @"db_spa.grand_right")]
    public partial class GrandRight : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IDGROUPUSER;

        private string _IDSCREEN;

        private int? _ROLE;
        #pragma warning restore 0649

        private EntityRef<GroupUser> _GroupUser;

        private EntityRef<Screen> _Screen;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDGROUPUSERChanging(int value);
        partial void OnIDGROUPUSERChanged();
        partial void OnIDSCREENChanging(string value);
        partial void OnIDSCREENChanged();
        partial void OnROLEChanging(int? value);
        partial void OnROLEChanged();
        #endregion

        public GrandRight()
        {
            this._GroupUser  = default(EntityRef<GroupUser>);
            this._Screen  = default(EntityRef<Screen>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IDGROUPUSER in the schema.
        /// </summary>
        [Column(Name = @"ID_GROUP_USER", Storage = "_IDGROUPUSER", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDGROUPUSER
        {
            get
            {
                return this._IDGROUPUSER;
            }
            set
            {
                if (this._IDGROUPUSER != value)
                {
                    if (this._GroupUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDGROUPUSERChanging(value);
                    this.SendPropertyChanging("IDGROUPUSER");
                    this._IDGROUPUSER = value;
                    this.SendPropertyChanged("IDGROUPUSER");
                    this.OnIDGROUPUSERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDSCREEN in the schema.
        /// </summary>
        [Column(Name = @"ID_SCREEN", Storage = "_IDSCREEN", CanBeNull = false, DbType = "CHAR(6) NOT NULL", IsPrimaryKey = true)]
        public string IDSCREEN
        {
            get
            {
                return this._IDSCREEN;
            }
            set
            {
                if (this._IDSCREEN != value)
                {
                    if (this._Screen.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDSCREENChanging(value);
                    this.SendPropertyChanging("IDSCREEN");
                    this._IDSCREEN = value;
                    this.SendPropertyChanged("IDSCREEN");
                    this.OnIDSCREENChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ROLE in the schema.
        /// </summary>
        [Column(Storage = "_ROLE", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? ROLE
        {
            get
            {
                return this._ROLE;
            }
            set
            {
                if (this._ROLE != value)
                {
                    this.OnROLEChanging(value);
                    this.SendPropertyChanging("ROLE");
                    this._ROLE = value;
                    this.SendPropertyChanged("ROLE");
                    this.OnROLEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupUser_GrandRight", Storage="_GroupUser", ThisKey="IDGROUPUSER", OtherKey="ID", IsForeignKey=true)]
        public GroupUser GroupUser
        {
            get
            {
                return this._GroupUser.Entity;
            }
            set
            {
                GroupUser previousValue = this._GroupUser.Entity;
                if ((previousValue != value) || (this._GroupUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("GroupUser");
                    if (previousValue != null)
                    {
                        this._GroupUser.Entity = null;
                        previousValue.GrandRights.Remove(this);
                    }
                    this._GroupUser.Entity = value;
                    if (value != null)
                    {
                        this._IDGROUPUSER = value.ID;
                        value.GrandRights.Add(this);
                    }
                    else
                    {
                        this._IDGROUPUSER = default(int);
                    }
                    this.SendPropertyChanged("GroupUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Screen in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Screen_GrandRight", Storage="_Screen", ThisKey="IDSCREEN", OtherKey="ID", IsForeignKey=true)]
        public Screen Screen
        {
            get
            {
                return this._Screen.Entity;
            }
            set
            {
                Screen previousValue = this._Screen.Entity;
                if ((previousValue != value) || (this._Screen.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Screen");
                    if (previousValue != null)
                    {
                        this._Screen.Entity = null;
                        previousValue.GrandRights.Remove(this);
                    }
                    this._Screen.Entity = value;
                    if (value != null)
                    {
                        this._IDSCREEN = value.ID;
                        value.GrandRights.Add(this);
                    }
                    else
                    {
                        this._IDSCREEN = default(string);
                    }
                    this.SendPropertyChanged("Screen");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.GroupItem in the schema.
    /// </summary>
    [Table(Name = @"db_spa.group_item")]
    public partial class GroupItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAMEGROUP;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<Item> _Items;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEGROUPChanging(string value);
        partial void OnNAMEGROUPChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public GroupItem()
        {
            this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAMEGROUP in the schema.
        /// </summary>
        [Column(Name = @"NAME_GROUP", Storage = "_NAMEGROUP", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAMEGROUP
        {
            get
            {
                return this._NAMEGROUP;
            }
            set
            {
                if (this._NAMEGROUP != value)
                {
                    this.OnNAMEGROUPChanging(value);
                    this.SendPropertyChanging("NAMEGROUP");
                    this._NAMEGROUP = value;
                    this.SendPropertyChanged("NAMEGROUP");
                    this.OnNAMEGROUPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Items in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupItem_Item", Storage="_Items", ThisKey="ID", OtherKey="IDGROUP", DeleteRule="RESTRICT")]
        public EntitySet<Item> Items
        {
            get
            {
                return this._Items;
            }
            set
            {
                this._Items.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Items(Item entity)
        {
            this.SendPropertyChanging("Items");
            entity.GroupItem = this;
        }
    
        private void detach_Items(Item entity)
        {
            this.SendPropertyChanging("Items");
            entity.GroupItem = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.GroupSupplier in the schema.
    /// </summary>
    [Table(Name = @"db_spa.group_supplier")]
    public partial class GroupSupplier : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAMEGROUP;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<Supplier> _Suppliers;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEGROUPChanging(string value);
        partial void OnNAMEGROUPChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public GroupSupplier()
        {
            this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAMEGROUP in the schema.
        /// </summary>
        [Column(Name = @"NAME_GROUP", Storage = "_NAMEGROUP", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAMEGROUP
        {
            get
            {
                return this._NAMEGROUP;
            }
            set
            {
                if (this._NAMEGROUP != value)
                {
                    this.OnNAMEGROUPChanging(value);
                    this.SendPropertyChanging("NAMEGROUP");
                    this._NAMEGROUP = value;
                    this.SendPropertyChanged("NAMEGROUP");
                    this.OnNAMEGROUPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Suppliers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupSupplier_Supplier", Storage="_Suppliers", ThisKey="ID", OtherKey="IDGROUP", DeleteRule="RESTRICT")]
        public EntitySet<Supplier> Suppliers
        {
            get
            {
                return this._Suppliers;
            }
            set
            {
                this._Suppliers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Suppliers(Supplier entity)
        {
            this.SendPropertyChanging("Suppliers");
            entity.GroupSupplier = this;
        }
    
        private void detach_Suppliers(Supplier entity)
        {
            this.SendPropertyChanging("Suppliers");
            entity.GroupSupplier = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.GroupUser in the schema.
    /// </summary>
    [Table(Name = @"db_spa.group_user")]
    public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAMEGROUPUSER;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<GrandRight> _GrandRights;

        private EntitySet<UserGroupUser> _UserGroupUsers;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEGROUPUSERChanging(string value);
        partial void OnNAMEGROUPUSERChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public GroupUser()
        {
            this._GrandRights = new EntitySet<GrandRight>(new Action<GrandRight>(this.attach_GrandRights), new Action<GrandRight>(this.detach_GrandRights));
            this._UserGroupUsers = new EntitySet<UserGroupUser>(new Action<UserGroupUser>(this.attach_UserGroupUsers), new Action<UserGroupUser>(this.detach_UserGroupUsers));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAMEGROUPUSER in the schema.
        /// </summary>
        [Column(Name = @"NAME_GROUP_USER", Storage = "_NAMEGROUPUSER", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAMEGROUPUSER
        {
            get
            {
                return this._NAMEGROUPUSER;
            }
            set
            {
                if (this._NAMEGROUPUSER != value)
                {
                    this.OnNAMEGROUPUSERChanging(value);
                    this.SendPropertyChanging("NAMEGROUPUSER");
                    this._NAMEGROUPUSER = value;
                    this.SendPropertyChanged("NAMEGROUPUSER");
                    this.OnNAMEGROUPUSERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GrandRights in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupUser_GrandRight", Storage="_GrandRights", ThisKey="ID", OtherKey="IDGROUPUSER", DeleteRule="RESTRICT")]
        public EntitySet<GrandRight> GrandRights
        {
            get
            {
                return this._GrandRights;
            }
            set
            {
                this._GrandRights.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserGroupUsers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupUser_UserGroupUser", Storage="_UserGroupUsers", ThisKey="ID", OtherKey="IDGROUPUSER", DeleteRule="RESTRICT")]
        public EntitySet<UserGroupUser> UserGroupUsers
        {
            get
            {
                return this._UserGroupUsers;
            }
            set
            {
                this._UserGroupUsers.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_GrandRights(GrandRight entity)
        {
            this.SendPropertyChanging("GrandRights");
            entity.GroupUser = this;
        }
    
        private void detach_GrandRights(GrandRight entity)
        {
            this.SendPropertyChanging("GrandRights");
            entity.GroupUser = null;
        }

        private void attach_UserGroupUsers(UserGroupUser entity)
        {
            this.SendPropertyChanging("UserGroupUsers");
            entity.GroupUser = this;
        }
    
        private void detach_UserGroupUsers(UserGroupUser entity)
        {
            this.SendPropertyChanging("UserGroupUsers");
            entity.GroupUser = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Item in the schema.
    /// </summary>
    [Table(Name = @"db_spa.item")]
    public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _IDGROUP;

        private int? _IDUNIT;

        private string _NAME;

        private byte[] _IMAGE;

        private string _CONTENT;

        private string _STEPCONDUCT;

        private float? _SALEOFF;

        private int? _NUMBER;

        private float? _PRICEOUT;

        private float? _PRICEIN;

        private float? _ROSE;

        private float? _ROSERATE;
        #pragma warning restore 0649

        private EntitySet<ContentItem> _ContentItems_IDITEM;

        private EntitySet<ContentItem> _ContentItems_IDITEMCONTENT;

        private EntitySet<DetailEnterCoupon> _DetailEnterCoupons;

        private EntitySet<DetailReceipt> _DetailReceipts;

        private EntityRef<GroupItem> _GroupItem;

        private EntityRef<UnitItem> _UnitItem;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDGROUPChanging(int? value);
        partial void OnIDGROUPChanged();
        partial void OnIDUNITChanging(int? value);
        partial void OnIDUNITChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnIMAGEChanging(byte[] value);
        partial void OnIMAGEChanged();
        partial void OnCONTENTChanging(string value);
        partial void OnCONTENTChanged();
        partial void OnSTEPCONDUCTChanging(string value);
        partial void OnSTEPCONDUCTChanged();
        partial void OnSALEOFFChanging(float? value);
        partial void OnSALEOFFChanged();
        partial void OnNUMBERChanging(int? value);
        partial void OnNUMBERChanged();
        partial void OnPRICEOUTChanging(float? value);
        partial void OnPRICEOUTChanged();
        partial void OnPRICEINChanging(float? value);
        partial void OnPRICEINChanged();
        partial void OnROSEChanging(float? value);
        partial void OnROSEChanged();
        partial void OnROSERATEChanging(float? value);
        partial void OnROSERATEChanged();
        #endregion

        public Item()
        {
            this._ContentItems_IDITEM = new EntitySet<ContentItem>(new Action<ContentItem>(this.attach_ContentItems_IDITEM), new Action<ContentItem>(this.detach_ContentItems_IDITEM));
            this._ContentItems_IDITEMCONTENT = new EntitySet<ContentItem>(new Action<ContentItem>(this.attach_ContentItems_IDITEMCONTENT), new Action<ContentItem>(this.detach_ContentItems_IDITEMCONTENT));
            this._DetailEnterCoupons = new EntitySet<DetailEnterCoupon>(new Action<DetailEnterCoupon>(this.attach_DetailEnterCoupons), new Action<DetailEnterCoupon>(this.detach_DetailEnterCoupons));
            this._DetailReceipts = new EntitySet<DetailReceipt>(new Action<DetailReceipt>(this.attach_DetailReceipts), new Action<DetailReceipt>(this.detach_DetailReceipts));
            this._GroupItem  = default(EntityRef<GroupItem>);
            this._UnitItem  = default(EntityRef<UnitItem>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDGROUP in the schema.
        /// </summary>
        [Column(Name = @"ID_GROUP", Storage = "_IDGROUP", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDGROUP
        {
            get
            {
                return this._IDGROUP;
            }
            set
            {
                if (this._IDGROUP != value)
                {
                    if (this._GroupItem.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDGROUPChanging(value);
                    this.SendPropertyChanging("IDGROUP");
                    this._IDGROUP = value;
                    this.SendPropertyChanged("IDGROUP");
                    this.OnIDGROUPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDUNIT in the schema.
        /// </summary>
        [Column(Name = @"ID_UNIT", Storage = "_IDUNIT", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDUNIT
        {
            get
            {
                return this._IDUNIT;
            }
            set
            {
                if (this._IDUNIT != value)
                {
                    if (this._UnitItem.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDUNITChanging(value);
                    this.SendPropertyChanging("IDUNIT");
                    this._IDUNIT = value;
                    this.SendPropertyChanged("IDUNIT");
                    this.OnIDUNITChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IMAGE in the schema.
        /// </summary>
        [Column(Storage = "_IMAGE", DbType = "BLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] IMAGE
        {
            get
            {
                return this._IMAGE;
            }
            set
            {
                if (this._IMAGE != value)
                {
                    this.OnIMAGEChanging(value);
                    this.SendPropertyChanging("IMAGE");
                    this._IMAGE = value;
                    this.SendPropertyChanged("IMAGE");
                    this.OnIMAGEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CONTENT in the schema.
        /// </summary>
        [Column(Storage = "_CONTENT", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string CONTENT
        {
            get
            {
                return this._CONTENT;
            }
            set
            {
                if (this._CONTENT != value)
                {
                    this.OnCONTENTChanging(value);
                    this.SendPropertyChanging("CONTENT");
                    this._CONTENT = value;
                    this.SendPropertyChanged("CONTENT");
                    this.OnCONTENTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STEPCONDUCT in the schema.
        /// </summary>
        [Column(Name = @"STEP_CONDUCT", Storage = "_STEPCONDUCT", DbType = "VARCHAR(500) NULL", UpdateCheck = UpdateCheck.Never)]
        public string STEPCONDUCT
        {
            get
            {
                return this._STEPCONDUCT;
            }
            set
            {
                if (this._STEPCONDUCT != value)
                {
                    this.OnSTEPCONDUCTChanging(value);
                    this.SendPropertyChanging("STEPCONDUCT");
                    this._STEPCONDUCT = value;
                    this.SendPropertyChanged("STEPCONDUCT");
                    this.OnSTEPCONDUCTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SALEOFF in the schema.
        /// </summary>
        [Column(Name = @"SALE_OFF", Storage = "_SALEOFF", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? SALEOFF
        {
            get
            {
                return this._SALEOFF;
            }
            set
            {
                if (this._SALEOFF != value)
                {
                    this.OnSALEOFFChanging(value);
                    this.SendPropertyChanging("SALEOFF");
                    this._SALEOFF = value;
                    this.SendPropertyChanged("SALEOFF");
                    this.OnSALEOFFChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NUMBER in the schema.
        /// </summary>
        [Column(Storage = "_NUMBER", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? NUMBER
        {
            get
            {
                return this._NUMBER;
            }
            set
            {
                if (this._NUMBER != value)
                {
                    this.OnNUMBERChanging(value);
                    this.SendPropertyChanging("NUMBER");
                    this._NUMBER = value;
                    this.SendPropertyChanged("NUMBER");
                    this.OnNUMBERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PRICEOUT in the schema.
        /// </summary>
        [Column(Name = @"PRICE_OUT", Storage = "_PRICEOUT", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? PRICEOUT
        {
            get
            {
                return this._PRICEOUT;
            }
            set
            {
                if (this._PRICEOUT != value)
                {
                    this.OnPRICEOUTChanging(value);
                    this.SendPropertyChanging("PRICEOUT");
                    this._PRICEOUT = value;
                    this.SendPropertyChanged("PRICEOUT");
                    this.OnPRICEOUTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PRICEIN in the schema.
        /// </summary>
        [Column(Name = @"PRICE_IN", Storage = "_PRICEIN", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? PRICEIN
        {
            get
            {
                return this._PRICEIN;
            }
            set
            {
                if (this._PRICEIN != value)
                {
                    this.OnPRICEINChanging(value);
                    this.SendPropertyChanging("PRICEIN");
                    this._PRICEIN = value;
                    this.SendPropertyChanged("PRICEIN");
                    this.OnPRICEINChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ROSE in the schema.
        /// </summary>
        [Column(Storage = "_ROSE", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? ROSE
        {
            get
            {
                return this._ROSE;
            }
            set
            {
                if (this._ROSE != value)
                {
                    this.OnROSEChanging(value);
                    this.SendPropertyChanging("ROSE");
                    this._ROSE = value;
                    this.SendPropertyChanged("ROSE");
                    this.OnROSEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ROSERATE in the schema.
        /// </summary>
        [Column(Name = @"ROSE_RATE", Storage = "_ROSERATE", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? ROSERATE
        {
            get
            {
                return this._ROSERATE;
            }
            set
            {
                if (this._ROSERATE != value)
                {
                    this.OnROSERATEChanging(value);
                    this.SendPropertyChanging("ROSERATE");
                    this._ROSERATE = value;
                    this.SendPropertyChanged("ROSERATE");
                    this.OnROSERATEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ContentItems_IDITEM in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_ContentItem", Storage="_ContentItems_IDITEM", ThisKey="ID", OtherKey="IDITEM", DeleteRule="RESTRICT")]
        public EntitySet<ContentItem> ContentItems_IDITEM
        {
            get
            {
                return this._ContentItems_IDITEM;
            }
            set
            {
                this._ContentItems_IDITEM.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for ContentItems_IDITEMCONTENT in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_ContentItem1", Storage="_ContentItems_IDITEMCONTENT", ThisKey="ID", OtherKey="IDITEMCONTENT", DeleteRule="RESTRICT")]
        public EntitySet<ContentItem> ContentItems_IDITEMCONTENT
        {
            get
            {
                return this._ContentItems_IDITEMCONTENT;
            }
            set
            {
                this._ContentItems_IDITEMCONTENT.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DetailEnterCoupons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_DetailEnterCoupon", Storage="_DetailEnterCoupons", ThisKey="ID", OtherKey="IDITEM", DeleteRule="RESTRICT")]
        public EntitySet<DetailEnterCoupon> DetailEnterCoupons
        {
            get
            {
                return this._DetailEnterCoupons;
            }
            set
            {
                this._DetailEnterCoupons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for DetailReceipts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Item_DetailReceipt", Storage="_DetailReceipts", ThisKey="ID", OtherKey="IDITEM", DeleteRule="RESTRICT")]
        public EntitySet<DetailReceipt> DetailReceipts
        {
            get
            {
                return this._DetailReceipts;
            }
            set
            {
                this._DetailReceipts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for GroupItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupItem_Item", Storage="_GroupItem", ThisKey="IDGROUP", OtherKey="ID", IsForeignKey=true)]
        public GroupItem GroupItem
        {
            get
            {
                return this._GroupItem.Entity;
            }
            set
            {
                GroupItem previousValue = this._GroupItem.Entity;
                if ((previousValue != value) || (this._GroupItem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("GroupItem");
                    if (previousValue != null)
                    {
                        this._GroupItem.Entity = null;
                        previousValue.Items.Remove(this);
                    }
                    this._GroupItem.Entity = value;
                    if (value != null)
                    {
                        this._IDGROUP = value.ID;
                        value.Items.Add(this);
                    }
                    else
                    {
                        this._IDGROUP = default(int?);
                    }
                    this.SendPropertyChanged("GroupItem");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UnitItem in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitItem_Item", Storage="_UnitItem", ThisKey="IDUNIT", OtherKey="ID", IsForeignKey=true)]
        public UnitItem UnitItem
        {
            get
            {
                return this._UnitItem.Entity;
            }
            set
            {
                UnitItem previousValue = this._UnitItem.Entity;
                if ((previousValue != value) || (this._UnitItem.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("UnitItem");
                    if (previousValue != null)
                    {
                        this._UnitItem.Entity = null;
                        previousValue.Items.Remove(this);
                    }
                    this._UnitItem.Entity = value;
                    if (value != null)
                    {
                        this._IDUNIT = value.ID;
                        value.Items.Add(this);
                    }
                    else
                    {
                        this._IDUNIT = default(int?);
                    }
                    this.SendPropertyChanged("UnitItem");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ContentItems_IDITEM(ContentItem entity)
        {
            this.SendPropertyChanging("ContentItems_IDITEM");
            entity.Item_IDITEM = this;
        }
    
        private void detach_ContentItems_IDITEM(ContentItem entity)
        {
            this.SendPropertyChanging("ContentItems_IDITEM");
            entity.Item_IDITEM = null;
        }

        private void attach_ContentItems_IDITEMCONTENT(ContentItem entity)
        {
            this.SendPropertyChanging("ContentItems_IDITEMCONTENT");
            entity.Item_IDITEMCONTENT = this;
        }
    
        private void detach_ContentItems_IDITEMCONTENT(ContentItem entity)
        {
            this.SendPropertyChanging("ContentItems_IDITEMCONTENT");
            entity.Item_IDITEMCONTENT = null;
        }

        private void attach_DetailEnterCoupons(DetailEnterCoupon entity)
        {
            this.SendPropertyChanging("DetailEnterCoupons");
            entity.Item = this;
        }
    
        private void detach_DetailEnterCoupons(DetailEnterCoupon entity)
        {
            this.SendPropertyChanging("DetailEnterCoupons");
            entity.Item = null;
        }

        private void attach_DetailReceipts(DetailReceipt entity)
        {
            this.SendPropertyChanging("DetailReceipts");
            entity.Item = this;
        }
    
        private void detach_DetailReceipts(DetailReceipt entity)
        {
            this.SendPropertyChanging("DetailReceipts");
            entity.Item = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.ProfileCu in the schema.
    /// </summary>
    [Table(Name = @"db_spa.profile_cus")]
    public partial class ProfileCu : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _IDPROFILE;

        private int? _IDTYPE;

        private string _NAME;

        private byte[] _IMAGE;

        private System.DateTime? _BIRTHDAY;

        private string _PHONE;

        private string _SEX;

        private string _ADDRESS;

        private int? _SCORE;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<Account> _Accounts;

        private EntityRef<TypeCu> _TypeCu;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDPROFILEChanging(int value);
        partial void OnIDPROFILEChanged();
        partial void OnIDTYPEChanging(int? value);
        partial void OnIDTYPEChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnIMAGEChanging(byte[] value);
        partial void OnIMAGEChanged();
        partial void OnBIRTHDAYChanging(System.DateTime? value);
        partial void OnBIRTHDAYChanged();
        partial void OnPHONEChanging(string value);
        partial void OnPHONEChanged();
        partial void OnSEXChanging(string value);
        partial void OnSEXChanged();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnSCOREChanging(int? value);
        partial void OnSCOREChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public ProfileCu()
        {
            this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
            this._TypeCu  = default(EntityRef<TypeCu>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IDPROFILE in the schema.
        /// </summary>
        [Column(Name = @"ID_PROFILE", Storage = "_IDPROFILE", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDPROFILE
        {
            get
            {
                return this._IDPROFILE;
            }
            set
            {
                if (this._IDPROFILE != value)
                {
                    this.OnIDPROFILEChanging(value);
                    this.SendPropertyChanging("IDPROFILE");
                    this._IDPROFILE = value;
                    this.SendPropertyChanged("IDPROFILE");
                    this.OnIDPROFILEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDTYPE in the schema.
        /// </summary>
        [Column(Name = @"ID_TYPE", Storage = "_IDTYPE", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDTYPE
        {
            get
            {
                return this._IDTYPE;
            }
            set
            {
                if (this._IDTYPE != value)
                {
                    if (this._TypeCu.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDTYPEChanging(value);
                    this.SendPropertyChanging("IDTYPE");
                    this._IDTYPE = value;
                    this.SendPropertyChanged("IDTYPE");
                    this.OnIDTYPEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IMAGE in the schema.
        /// </summary>
        [Column(Storage = "_IMAGE", DbType = "LONGBLOB NULL", UpdateCheck = UpdateCheck.Never)]
        public byte[] IMAGE
        {
            get
            {
                return this._IMAGE;
            }
            set
            {
                if (this._IMAGE != value)
                {
                    this.OnIMAGEChanging(value);
                    this.SendPropertyChanging("IMAGE");
                    this._IMAGE = value;
                    this.SendPropertyChanged("IMAGE");
                    this.OnIMAGEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BIRTHDAY in the schema.
        /// </summary>
        [Column(Storage = "_BIRTHDAY", DbType = "DATE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? BIRTHDAY
        {
            get
            {
                return this._BIRTHDAY;
            }
            set
            {
                if (this._BIRTHDAY != value)
                {
                    this.OnBIRTHDAYChanging(value);
                    this.SendPropertyChanging("BIRTHDAY");
                    this._BIRTHDAY = value;
                    this.SendPropertyChanged("BIRTHDAY");
                    this.OnBIRTHDAYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHONE in the schema.
        /// </summary>
        [Column(Storage = "_PHONE", DbType = "CHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PHONE
        {
            get
            {
                return this._PHONE;
            }
            set
            {
                if (this._PHONE != value)
                {
                    this.OnPHONEChanging(value);
                    this.SendPropertyChanging("PHONE");
                    this._PHONE = value;
                    this.SendPropertyChanged("PHONE");
                    this.OnPHONEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SEX in the schema.
        /// </summary>
        [Column(Storage = "_SEX", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string SEX
        {
            get
            {
                return this._SEX;
            }
            set
            {
                if (this._SEX != value)
                {
                    this.OnSEXChanging(value);
                    this.SendPropertyChanging("SEX");
                    this._SEX = value;
                    this.SendPropertyChanged("SEX");
                    this.OnSEXChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ADDRESS in the schema.
        /// </summary>
        [Column(Storage = "_ADDRESS", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ADDRESS
        {
            get
            {
                return this._ADDRESS;
            }
            set
            {
                if (this._ADDRESS != value)
                {
                    this.OnADDRESSChanging(value);
                    this.SendPropertyChanging("ADDRESS");
                    this._ADDRESS = value;
                    this.SendPropertyChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for SCORE in the schema.
        /// </summary>
        [Column(Storage = "_SCORE", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? SCORE
        {
            get
            {
                return this._SCORE;
            }
            set
            {
                if (this._SCORE != value)
                {
                    this.OnSCOREChanging(value);
                    this.SendPropertyChanging("SCORE");
                    this._SCORE = value;
                    this.SendPropertyChanged("SCORE");
                    this.OnSCOREChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Accounts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="ProfileCu_Account", Storage="_Accounts", ThisKey="IDPROFILE", OtherKey="IDPROFILE", DeleteRule="RESTRICT")]
        public EntitySet<Account> Accounts
        {
            get
            {
                return this._Accounts;
            }
            set
            {
                this._Accounts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for TypeCu in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TypeCu_ProfileCu", Storage="_TypeCu", ThisKey="IDTYPE", OtherKey="ID", IsForeignKey=true)]
        public TypeCu TypeCu
        {
            get
            {
                return this._TypeCu.Entity;
            }
            set
            {
                TypeCu previousValue = this._TypeCu.Entity;
                if ((previousValue != value) || (this._TypeCu.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("TypeCu");
                    if (previousValue != null)
                    {
                        this._TypeCu.Entity = null;
                        previousValue.ProfileCus.Remove(this);
                    }
                    this._TypeCu.Entity = value;
                    if (value != null)
                    {
                        this._IDTYPE = value.ID;
                        value.ProfileCus.Add(this);
                    }
                    else
                    {
                        this._IDTYPE = default(int?);
                    }
                    this.SendPropertyChanged("TypeCu");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Accounts(Account entity)
        {
            this.SendPropertyChanging("Accounts");
            entity.ProfileCu = this;
        }
    
        private void detach_Accounts(Account entity)
        {
            this.SendPropertyChanging("Accounts");
            entity.ProfileCu = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Receipt in the schema.
    /// </summary>
    [Table(Name = @"db_spa.receipt")]
    public partial class Receipt : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int _IDCHAIR;

        private string _IDUSER;

        private int _IDACCOUNT;

        private System.DateTime _CREATEDATE;

        private System.DateTime _USEDATE;

        private int _TYPERECEIPT;

        private float _TOTALMONEY;

        private int _STATUS;
        #pragma warning restore 0649

        private EntitySet<DetailReceipt> _DetailReceipts;

        private EntityRef<Account> _Account;

        private EntityRef<Chair> _Chair;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDCHAIRChanging(int value);
        partial void OnIDCHAIRChanged();
        partial void OnIDUSERChanging(string value);
        partial void OnIDUSERChanged();
        partial void OnIDACCOUNTChanging(int value);
        partial void OnIDACCOUNTChanged();
        partial void OnCREATEDATEChanging(System.DateTime value);
        partial void OnCREATEDATEChanged();
        partial void OnUSEDATEChanging(System.DateTime value);
        partial void OnUSEDATEChanged();
        partial void OnTYPERECEIPTChanging(int value);
        partial void OnTYPERECEIPTChanged();
        partial void OnTOTALMONEYChanging(float value);
        partial void OnTOTALMONEYChanged();
        partial void OnSTATUSChanging(int value);
        partial void OnSTATUSChanged();
        #endregion

        public Receipt()
        {
            this._DetailReceipts = new EntitySet<DetailReceipt>(new Action<DetailReceipt>(this.attach_DetailReceipts), new Action<DetailReceipt>(this.detach_DetailReceipts));
            this._Account  = default(EntityRef<Account>);
            this._Chair  = default(EntityRef<Chair>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDCHAIR in the schema.
        /// </summary>
        [Column(Name = @"ID_CHAIR", Storage = "_IDCHAIR", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IDCHAIR
        {
            get
            {
                return this._IDCHAIR;
            }
            set
            {
                if (this._IDCHAIR != value)
                {
                    if (this._Chair.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDCHAIRChanging(value);
                    this.SendPropertyChanging("IDCHAIR");
                    this._IDCHAIR = value;
                    this.SendPropertyChanged("IDCHAIR");
                    this.OnIDCHAIRChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDUSER in the schema.
        /// </summary>
        [Column(Name = @"ID_USER", Storage = "_IDUSER", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string IDUSER
        {
            get
            {
                return this._IDUSER;
            }
            set
            {
                if (this._IDUSER != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDUSERChanging(value);
                    this.SendPropertyChanging("IDUSER");
                    this._IDUSER = value;
                    this.SendPropertyChanged("IDUSER");
                    this.OnIDUSERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDACCOUNT in the schema.
        /// </summary>
        [Column(Name = @"ID_ACCOUNT", Storage = "_IDACCOUNT", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IDACCOUNT
        {
            get
            {
                return this._IDACCOUNT;
            }
            set
            {
                if (this._IDACCOUNT != value)
                {
                    if (this._Account.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDACCOUNTChanging(value);
                    this.SendPropertyChanging("IDACCOUNT");
                    this._IDACCOUNT = value;
                    this.SendPropertyChanged("IDACCOUNT");
                    this.OnIDACCOUNTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CREATEDATE in the schema.
        /// </summary>
        [Column(Name = @"CREATE_DATE", Storage = "_CREATEDATE", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime CREATEDATE
        {
            get
            {
                return this._CREATEDATE;
            }
            set
            {
                if (this._CREATEDATE != value)
                {
                    this.OnCREATEDATEChanging(value);
                    this.SendPropertyChanging("CREATEDATE");
                    this._CREATEDATE = value;
                    this.SendPropertyChanged("CREATEDATE");
                    this.OnCREATEDATEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for USEDATE in the schema.
        /// </summary>
        [Column(Name = @"USE_DATE", Storage = "_USEDATE", CanBeNull = false, DbType = "DATE NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime USEDATE
        {
            get
            {
                return this._USEDATE;
            }
            set
            {
                if (this._USEDATE != value)
                {
                    this.OnUSEDATEChanging(value);
                    this.SendPropertyChanging("USEDATE");
                    this._USEDATE = value;
                    this.SendPropertyChanged("USEDATE");
                    this.OnUSEDATEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TYPERECEIPT in the schema.
        /// </summary>
        [Column(Name = @"TYPE_RECEIPT", Storage = "_TYPERECEIPT", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int TYPERECEIPT
        {
            get
            {
                return this._TYPERECEIPT;
            }
            set
            {
                if (this._TYPERECEIPT != value)
                {
                    this.OnTYPERECEIPTChanging(value);
                    this.SendPropertyChanging("TYPERECEIPT");
                    this._TYPERECEIPT = value;
                    this.SendPropertyChanged("TYPERECEIPT");
                    this.OnTYPERECEIPTChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TOTALMONEY in the schema.
        /// </summary>
        [Column(Name = @"TOTAL_MONEY", Storage = "_TOTALMONEY", CanBeNull = false, DbType = "FLOAT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public float TOTALMONEY
        {
            get
            {
                return this._TOTALMONEY;
            }
            set
            {
                if (this._TOTALMONEY != value)
                {
                    this.OnTOTALMONEYChanging(value);
                    this.SendPropertyChanging("TOTALMONEY");
                    this._TOTALMONEY = value;
                    this.SendPropertyChanged("TOTALMONEY");
                    this.OnTOTALMONEYChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DetailReceipts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Receipt_DetailReceipt", Storage="_DetailReceipts", ThisKey="ID", OtherKey="IDRECEIPT", DeleteRule="RESTRICT")]
        public EntitySet<DetailReceipt> DetailReceipts
        {
            get
            {
                return this._DetailReceipts;
            }
            set
            {
                this._DetailReceipts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Account in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Account_Receipt", Storage="_Account", ThisKey="IDACCOUNT", OtherKey="ID", IsForeignKey=true)]
        public Account Account
        {
            get
            {
                return this._Account.Entity;
            }
            set
            {
                Account previousValue = this._Account.Entity;
                if ((previousValue != value) || (this._Account.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Account");
                    if (previousValue != null)
                    {
                        this._Account.Entity = null;
                        previousValue.Receipts.Remove(this);
                    }
                    this._Account.Entity = value;
                    if (value != null)
                    {
                        this._IDACCOUNT = value.ID;
                        value.Receipts.Add(this);
                    }
                    else
                    {
                        this._IDACCOUNT = default(int);
                    }
                    this.SendPropertyChanged("Account");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Chair in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Chair_Receipt", Storage="_Chair", ThisKey="IDCHAIR", OtherKey="ID", IsForeignKey=true)]
        public Chair Chair
        {
            get
            {
                return this._Chair.Entity;
            }
            set
            {
                Chair previousValue = this._Chair.Entity;
                if ((previousValue != value) || (this._Chair.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Chair");
                    if (previousValue != null)
                    {
                        this._Chair.Entity = null;
                        previousValue.Receipts.Remove(this);
                    }
                    this._Chair.Entity = value;
                    if (value != null)
                    {
                        this._IDCHAIR = value.ID;
                        value.Receipts.Add(this);
                    }
                    else
                    {
                        this._IDCHAIR = default(int);
                    }
                    this.SendPropertyChanged("Chair");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Receipt", Storage="_User", ThisKey="IDUSER", OtherKey="USERNAME", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.Receipts.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._IDUSER = value.USERNAME;
                        value.Receipts.Add(this);
                    }
                    else
                    {
                        this._IDUSER = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DetailReceipts(DetailReceipt entity)
        {
            this.SendPropertyChanging("DetailReceipts");
            entity.Receipt = this;
        }
    
        private void detach_DetailReceipts(DetailReceipt entity)
        {
            this.SendPropertyChanging("DetailReceipts");
            entity.Receipt = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Screen in the schema.
    /// </summary>
    [Table(Name = @"db_spa.screen")]
    public partial class Screen : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _ID;

        private string _NAME;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<GrandRight> _GrandRights;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(string value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public Screen()
        {
            this._GrandRights = new EntitySet<GrandRight>(new Action<GrandRight>(this.attach_GrandRights), new Action<GrandRight>(this.detach_GrandRights));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "CHAR(6) NOT NULL", IsPrimaryKey = true)]
        public string ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GrandRights in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Screen_GrandRight", Storage="_GrandRights", ThisKey="ID", OtherKey="IDSCREEN", DeleteRule="RESTRICT")]
        public EntitySet<GrandRight> GrandRights
        {
            get
            {
                return this._GrandRights;
            }
            set
            {
                this._GrandRights.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_GrandRights(GrandRight entity)
        {
            this.SendPropertyChanging("GrandRights");
            entity.Screen = this;
        }
    
        private void detach_GrandRights(GrandRight entity)
        {
            this.SendPropertyChanging("GrandRights");
            entity.Screen = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Staff in the schema.
    /// </summary>
    [Table(Name = @"db_spa.staff")]
    public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAME;

        private string _PHONE;

        private string _EMAIL;

        private string _ADDRESS;

        private float? _LUONG;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<DetailReceipt> _DetailReceipts;

        private EntitySet<EnterCoupon> _EnterCoupons;

        private EntitySet<UserStaff> _UserStaffs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPHONEChanging(string value);
        partial void OnPHONEChanged();
        partial void OnEMAILChanging(string value);
        partial void OnEMAILChanged();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnLUONGChanging(float? value);
        partial void OnLUONGChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public Staff()
        {
            this._DetailReceipts = new EntitySet<DetailReceipt>(new Action<DetailReceipt>(this.attach_DetailReceipts), new Action<DetailReceipt>(this.detach_DetailReceipts));
            this._EnterCoupons = new EntitySet<EnterCoupon>(new Action<EnterCoupon>(this.attach_EnterCoupons), new Action<EnterCoupon>(this.detach_EnterCoupons));
            this._UserStaffs = new EntitySet<UserStaff>(new Action<UserStaff>(this.attach_UserStaffs), new Action<UserStaff>(this.detach_UserStaffs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHONE in the schema.
        /// </summary>
        [Column(Storage = "_PHONE", DbType = "CHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PHONE
        {
            get
            {
                return this._PHONE;
            }
            set
            {
                if (this._PHONE != value)
                {
                    this.OnPHONEChanging(value);
                    this.SendPropertyChanging("PHONE");
                    this._PHONE = value;
                    this.SendPropertyChanged("PHONE");
                    this.OnPHONEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAIL in the schema.
        /// </summary>
        [Column(Storage = "_EMAIL", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAIL
        {
            get
            {
                return this._EMAIL;
            }
            set
            {
                if (this._EMAIL != value)
                {
                    this.OnEMAILChanging(value);
                    this.SendPropertyChanging("EMAIL");
                    this._EMAIL = value;
                    this.SendPropertyChanged("EMAIL");
                    this.OnEMAILChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ADDRESS in the schema.
        /// </summary>
        [Column(Storage = "_ADDRESS", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ADDRESS
        {
            get
            {
                return this._ADDRESS;
            }
            set
            {
                if (this._ADDRESS != value)
                {
                    this.OnADDRESSChanging(value);
                    this.SendPropertyChanging("ADDRESS");
                    this._ADDRESS = value;
                    this.SendPropertyChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LUONG in the schema.
        /// </summary>
        [Column(Storage = "_LUONG", DbType = "FLOAT NULL", UpdateCheck = UpdateCheck.Never)]
        public float? LUONG
        {
            get
            {
                return this._LUONG;
            }
            set
            {
                if (this._LUONG != value)
                {
                    this.OnLUONGChanging(value);
                    this.SendPropertyChanging("LUONG");
                    this._LUONG = value;
                    this.SendPropertyChanged("LUONG");
                    this.OnLUONGChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DetailReceipts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_DetailReceipt", Storage="_DetailReceipts", ThisKey="ID", OtherKey="IDSTAFF", DeleteRule="RESTRICT")]
        public EntitySet<DetailReceipt> DetailReceipts
        {
            get
            {
                return this._DetailReceipts;
            }
            set
            {
                this._DetailReceipts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for EnterCoupons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_EnterCoupon", Storage="_EnterCoupons", ThisKey="ID", OtherKey="IDSTAFF", DeleteRule="RESTRICT")]
        public EntitySet<EnterCoupon> EnterCoupons
        {
            get
            {
                return this._EnterCoupons;
            }
            set
            {
                this._EnterCoupons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_UserStaff", Storage="_UserStaffs", ThisKey="ID", OtherKey="IDSTAFF", DeleteRule="RESTRICT")]
        public EntitySet<UserStaff> UserStaffs
        {
            get
            {
                return this._UserStaffs;
            }
            set
            {
                this._UserStaffs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_DetailReceipts(DetailReceipt entity)
        {
            this.SendPropertyChanging("DetailReceipts");
            entity.Staff = this;
        }
    
        private void detach_DetailReceipts(DetailReceipt entity)
        {
            this.SendPropertyChanging("DetailReceipts");
            entity.Staff = null;
        }

        private void attach_EnterCoupons(EnterCoupon entity)
        {
            this.SendPropertyChanging("EnterCoupons");
            entity.Staff = this;
        }
    
        private void detach_EnterCoupons(EnterCoupon entity)
        {
            this.SendPropertyChanging("EnterCoupons");
            entity.Staff = null;
        }

        private void attach_UserStaffs(UserStaff entity)
        {
            this.SendPropertyChanging("UserStaffs");
            entity.Staff = this;
        }
    
        private void detach_UserStaffs(UserStaff entity)
        {
            this.SendPropertyChanging("UserStaffs");
            entity.Staff = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.Supplier in the schema.
    /// </summary>
    [Table(Name = @"db_spa.supplier")]
    public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private int? _IDGROUP;

        private string _NAME;

        private string _PHONE;

        private string _EMAIL;

        private string _ADDRESS;

        private int? _TAXCODE;
        #pragma warning restore 0649

        private EntitySet<EnterCoupon> _EnterCoupons;

        private EntityRef<GroupSupplier> _GroupSupplier;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIDGROUPChanging(int? value);
        partial void OnIDGROUPChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnPHONEChanging(string value);
        partial void OnPHONEChanged();
        partial void OnEMAILChanging(string value);
        partial void OnEMAILChanged();
        partial void OnADDRESSChanging(string value);
        partial void OnADDRESSChanged();
        partial void OnTAXCODEChanging(int? value);
        partial void OnTAXCODEChanged();
        #endregion

        public Supplier()
        {
            this._EnterCoupons = new EntitySet<EnterCoupon>(new Action<EnterCoupon>(this.attach_EnterCoupons), new Action<EnterCoupon>(this.detach_EnterCoupons));
            this._GroupSupplier  = default(EntityRef<GroupSupplier>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDGROUP in the schema.
        /// </summary>
        [Column(Name = @"ID_GROUP", Storage = "_IDGROUP", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? IDGROUP
        {
            get
            {
                return this._IDGROUP;
            }
            set
            {
                if (this._IDGROUP != value)
                {
                    if (this._GroupSupplier.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDGROUPChanging(value);
                    this.SendPropertyChanging("IDGROUP");
                    this._IDGROUP = value;
                    this.SendPropertyChanged("IDGROUP");
                    this.OnIDGROUPChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PHONE in the schema.
        /// </summary>
        [Column(Storage = "_PHONE", DbType = "CHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PHONE
        {
            get
            {
                return this._PHONE;
            }
            set
            {
                if (this._PHONE != value)
                {
                    this.OnPHONEChanging(value);
                    this.SendPropertyChanging("PHONE");
                    this._PHONE = value;
                    this.SendPropertyChanged("PHONE");
                    this.OnPHONEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EMAIL in the schema.
        /// </summary>
        [Column(Storage = "_EMAIL", DbType = "VARCHAR(100) NULL", UpdateCheck = UpdateCheck.Never)]
        public string EMAIL
        {
            get
            {
                return this._EMAIL;
            }
            set
            {
                if (this._EMAIL != value)
                {
                    this.OnEMAILChanging(value);
                    this.SendPropertyChanging("EMAIL");
                    this._EMAIL = value;
                    this.SendPropertyChanged("EMAIL");
                    this.OnEMAILChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ADDRESS in the schema.
        /// </summary>
        [Column(Storage = "_ADDRESS", DbType = "VARCHAR(200) NULL", UpdateCheck = UpdateCheck.Never)]
        public string ADDRESS
        {
            get
            {
                return this._ADDRESS;
            }
            set
            {
                if (this._ADDRESS != value)
                {
                    this.OnADDRESSChanging(value);
                    this.SendPropertyChanging("ADDRESS");
                    this._ADDRESS = value;
                    this.SendPropertyChanged("ADDRESS");
                    this.OnADDRESSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for TAXCODE in the schema.
        /// </summary>
        [Column(Name = @"TAX_CODE", Storage = "_TAXCODE", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? TAXCODE
        {
            get
            {
                return this._TAXCODE;
            }
            set
            {
                if (this._TAXCODE != value)
                {
                    this.OnTAXCODEChanging(value);
                    this.SendPropertyChanging("TAXCODE");
                    this._TAXCODE = value;
                    this.SendPropertyChanged("TAXCODE");
                    this.OnTAXCODEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterCoupons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Supplier_EnterCoupon", Storage="_EnterCoupons", ThisKey="ID", OtherKey="IDSUPPLIER", DeleteRule="RESTRICT")]
        public EntitySet<EnterCoupon> EnterCoupons
        {
            get
            {
                return this._EnterCoupons;
            }
            set
            {
                this._EnterCoupons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for GroupSupplier in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupSupplier_Supplier", Storage="_GroupSupplier", ThisKey="IDGROUP", OtherKey="ID", IsForeignKey=true)]
        public GroupSupplier GroupSupplier
        {
            get
            {
                return this._GroupSupplier.Entity;
            }
            set
            {
                GroupSupplier previousValue = this._GroupSupplier.Entity;
                if ((previousValue != value) || (this._GroupSupplier.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("GroupSupplier");
                    if (previousValue != null)
                    {
                        this._GroupSupplier.Entity = null;
                        previousValue.Suppliers.Remove(this);
                    }
                    this._GroupSupplier.Entity = value;
                    if (value != null)
                    {
                        this._IDGROUP = value.ID;
                        value.Suppliers.Add(this);
                    }
                    else
                    {
                        this._IDGROUP = default(int?);
                    }
                    this.SendPropertyChanged("GroupSupplier");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_EnterCoupons(EnterCoupon entity)
        {
            this.SendPropertyChanging("EnterCoupons");
            entity.Supplier = this;
        }
    
        private void detach_EnterCoupons(EnterCoupon entity)
        {
            this.SendPropertyChanging("EnterCoupons");
            entity.Supplier = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.TypeCu in the schema.
    /// </summary>
    [Table(Name = @"db_spa.type_cus")]
    public partial class TypeCu : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAME;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<ProfileCu> _ProfileCus;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public TypeCu()
        {
            this._ProfileCus = new EntitySet<ProfileCu>(new Action<ProfileCu>(this.attach_ProfileCus), new Action<ProfileCu>(this.detach_ProfileCus));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProfileCus in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="TypeCu_ProfileCu", Storage="_ProfileCus", ThisKey="ID", OtherKey="IDTYPE", DeleteRule="RESTRICT")]
        public EntitySet<ProfileCu> ProfileCus
        {
            get
            {
                return this._ProfileCus;
            }
            set
            {
                this._ProfileCus.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_ProfileCus(ProfileCu entity)
        {
            this.SendPropertyChanging("ProfileCus");
            entity.TypeCu = this;
        }
    
        private void detach_ProfileCus(ProfileCu entity)
        {
            this.SendPropertyChanging("ProfileCus");
            entity.TypeCu = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.UnitItem in the schema.
    /// </summary>
    [Table(Name = @"db_spa.unit_item")]
    public partial class UnitItem : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _ID;

        private string _NAME;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<Item> _Items;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNAMEChanging(string value);
        partial void OnNAMEChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public UnitItem()
        {
            this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if (this._ID != value)
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging("ID");
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for NAME in the schema.
        /// </summary>
        [Column(Storage = "_NAME", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string NAME
        {
            get
            {
                return this._NAME;
            }
            set
            {
                if (this._NAME != value)
                {
                    this.OnNAMEChanging(value);
                    this.SendPropertyChanging("NAME");
                    this._NAME = value;
                    this.SendPropertyChanged("NAME");
                    this.OnNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Items in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="UnitItem_Item", Storage="_Items", ThisKey="ID", OtherKey="IDUNIT", DeleteRule="RESTRICT")]
        public EntitySet<Item> Items
        {
            get
            {
                return this._Items;
            }
            set
            {
                this._Items.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Items(Item entity)
        {
            this.SendPropertyChanging("Items");
            entity.UnitItem = this;
        }
    
        private void detach_Items(Item entity)
        {
            this.SendPropertyChanging("Items");
            entity.UnitItem = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.User in the schema.
    /// </summary>
    [Table(Name = @"db_spa.user")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _USERNAME;

        private string _PASSWORD;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntitySet<EnterCoupon> _EnterCoupons;

        private EntitySet<Receipt> _Receipts;

        private EntitySet<UserGroupUser> _UserGroupUsers;

        private EntitySet<UserStaff> _UserStaffs;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnPASSWORDChanging(string value);
        partial void OnPASSWORDChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public User()
        {
            this._EnterCoupons = new EntitySet<EnterCoupon>(new Action<EnterCoupon>(this.attach_EnterCoupons), new Action<EnterCoupon>(this.detach_EnterCoupons));
            this._Receipts = new EntitySet<Receipt>(new Action<Receipt>(this.attach_Receipts), new Action<Receipt>(this.detach_Receipts));
            this._UserGroupUsers = new EntitySet<UserGroupUser>(new Action<UserGroupUser>(this.attach_UserGroupUsers), new Action<UserGroupUser>(this.detach_UserGroupUsers));
            this._UserStaffs = new EntitySet<UserStaff>(new Action<UserStaff>(this.attach_UserStaffs), new Action<UserStaff>(this.detach_UserStaffs));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for USERNAME in the schema.
        /// </summary>
        [Column(Name = @"USER_NAME", Storage = "_USERNAME", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging("USERNAME");
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PASSWORD in the schema.
        /// </summary>
        [Column(Name = @"`PASSWORD`", Storage = "_PASSWORD", DbType = "VARCHAR(50) NULL", UpdateCheck = UpdateCheck.Never)]
        public string PASSWORD
        {
            get
            {
                return this._PASSWORD;
            }
            set
            {
                if (this._PASSWORD != value)
                {
                    this.OnPASSWORDChanging(value);
                    this.SendPropertyChanging("PASSWORD");
                    this._PASSWORD = value;
                    this.SendPropertyChanged("PASSWORD");
                    this.OnPASSWORDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for EnterCoupons in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_EnterCoupon", Storage="_EnterCoupons", ThisKey="USERNAME", OtherKey="IDUSER", DeleteRule="RESTRICT")]
        public EntitySet<EnterCoupon> EnterCoupons
        {
            get
            {
                return this._EnterCoupons;
            }
            set
            {
                this._EnterCoupons.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for Receipts in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_Receipt", Storage="_Receipts", ThisKey="USERNAME", OtherKey="IDUSER", DeleteRule="RESTRICT")]
        public EntitySet<Receipt> Receipts
        {
            get
            {
                return this._Receipts;
            }
            set
            {
                this._Receipts.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserGroupUsers in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserGroupUser", Storage="_UserGroupUsers", ThisKey="USERNAME", OtherKey="USERNAME", DeleteRule="RESTRICT")]
        public EntitySet<UserGroupUser> UserGroupUsers
        {
            get
            {
                return this._UserGroupUsers;
            }
            set
            {
                this._UserGroupUsers.Assign(value);
            }
        }

    
        /// <summary>
        /// There are no comments for UserStaffs in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserStaff", Storage="_UserStaffs", ThisKey="USERNAME", OtherKey="USERNAME", DeleteRule="RESTRICT")]
        public EntitySet<UserStaff> UserStaffs
        {
            get
            {
                return this._UserStaffs;
            }
            set
            {
                this._UserStaffs.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_EnterCoupons(EnterCoupon entity)
        {
            this.SendPropertyChanging("EnterCoupons");
            entity.User = this;
        }
    
        private void detach_EnterCoupons(EnterCoupon entity)
        {
            this.SendPropertyChanging("EnterCoupons");
            entity.User = null;
        }

        private void attach_Receipts(Receipt entity)
        {
            this.SendPropertyChanging("Receipts");
            entity.User = this;
        }
    
        private void detach_Receipts(Receipt entity)
        {
            this.SendPropertyChanging("Receipts");
            entity.User = null;
        }

        private void attach_UserGroupUsers(UserGroupUser entity)
        {
            this.SendPropertyChanging("UserGroupUsers");
            entity.User = this;
        }
    
        private void detach_UserGroupUsers(UserGroupUser entity)
        {
            this.SendPropertyChanging("UserGroupUsers");
            entity.User = null;
        }

        private void attach_UserStaffs(UserStaff entity)
        {
            this.SendPropertyChanging("UserStaffs");
            entity.User = this;
        }
    
        private void detach_UserStaffs(UserStaff entity)
        {
            this.SendPropertyChanging("UserStaffs");
            entity.User = null;
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.UserGroupUser in the schema.
    /// </summary>
    [Table(Name = @"db_spa.user_group_user")]
    public partial class UserGroupUser : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _USERNAME;

        private int _IDGROUPUSER;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<GroupUser> _GroupUser;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnIDGROUPUSERChanging(int value);
        partial void OnIDGROUPUSERChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public UserGroupUser()
        {
            this._GroupUser  = default(EntityRef<GroupUser>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for USERNAME in the schema.
        /// </summary>
        [Column(Name = @"USER_NAME", Storage = "_USERNAME", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging("USERNAME");
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDGROUPUSER in the schema.
        /// </summary>
        [Column(Name = @"ID_GROUP_USER", Storage = "_IDGROUPUSER", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDGROUPUSER
        {
            get
            {
                return this._IDGROUPUSER;
            }
            set
            {
                if (this._IDGROUPUSER != value)
                {
                    if (this._GroupUser.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDGROUPUSERChanging(value);
                    this.SendPropertyChanging("IDGROUPUSER");
                    this._IDGROUPUSER = value;
                    this.SendPropertyChanged("IDGROUPUSER");
                    this.OnIDGROUPUSERChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupUser in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="GroupUser_UserGroupUser", Storage="_GroupUser", ThisKey="IDGROUPUSER", OtherKey="ID", IsForeignKey=true)]
        public GroupUser GroupUser
        {
            get
            {
                return this._GroupUser.Entity;
            }
            set
            {
                GroupUser previousValue = this._GroupUser.Entity;
                if ((previousValue != value) || (this._GroupUser.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("GroupUser");
                    if (previousValue != null)
                    {
                        this._GroupUser.Entity = null;
                        previousValue.UserGroupUsers.Remove(this);
                    }
                    this._GroupUser.Entity = value;
                    if (value != null)
                    {
                        this._IDGROUPUSER = value.ID;
                        value.UserGroupUsers.Add(this);
                    }
                    else
                    {
                        this._IDGROUPUSER = default(int);
                    }
                    this.SendPropertyChanged("GroupUser");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserGroupUser", Storage="_User", ThisKey="USERNAME", OtherKey="USERNAME", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.UserGroupUsers.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._USERNAME = value.USERNAME;
                        value.UserGroupUsers.Add(this);
                    }
                    else
                    {
                        this._USERNAME = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for DbSpaContext.UserStaff in the schema.
    /// </summary>
    [Table(Name = @"db_spa.user_staff")]
    public partial class UserStaff : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private string _USERNAME;

        private int _IDSTAFF;

        private int _IDBRANCH;

        private int? _STATUS;
        #pragma warning restore 0649

        private EntityRef<Branch> _Branch;

        private EntityRef<Staff> _Staff;

        private EntityRef<User> _User;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnUSERNAMEChanging(string value);
        partial void OnUSERNAMEChanged();
        partial void OnIDSTAFFChanging(int value);
        partial void OnIDSTAFFChanged();
        partial void OnIDBRANCHChanging(int value);
        partial void OnIDBRANCHChanged();
        partial void OnSTATUSChanging(int? value);
        partial void OnSTATUSChanged();
        #endregion

        public UserStaff()
        {
            this._Branch  = default(EntityRef<Branch>);
            this._Staff  = default(EntityRef<Staff>);
            this._User  = default(EntityRef<User>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for USERNAME in the schema.
        /// </summary>
        [Column(Name = @"USER_NAME", Storage = "_USERNAME", CanBeNull = false, DbType = "VARCHAR(50) NOT NULL", IsPrimaryKey = true)]
        public string USERNAME
        {
            get
            {
                return this._USERNAME;
            }
            set
            {
                if (this._USERNAME != value)
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnUSERNAMEChanging(value);
                    this.SendPropertyChanging("USERNAME");
                    this._USERNAME = value;
                    this.SendPropertyChanged("USERNAME");
                    this.OnUSERNAMEChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDSTAFF in the schema.
        /// </summary>
        [Column(Name = @"ID_STAFF", Storage = "_IDSTAFF", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDSTAFF
        {
            get
            {
                return this._IDSTAFF;
            }
            set
            {
                if (this._IDSTAFF != value)
                {
                    if (this._Staff.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDSTAFFChanging(value);
                    this.SendPropertyChanging("IDSTAFF");
                    this._IDSTAFF = value;
                    this.SendPropertyChanged("IDSTAFF");
                    this.OnIDSTAFFChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IDBRANCH in the schema.
        /// </summary>
        [Column(Name = @"ID_BRANCH", Storage = "_IDBRANCH", CanBeNull = false, DbType = "INT(11) NOT NULL", IsPrimaryKey = true)]
        public int IDBRANCH
        {
            get
            {
                return this._IDBRANCH;
            }
            set
            {
                if (this._IDBRANCH != value)
                {
                    if (this._Branch.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIDBRANCHChanging(value);
                    this.SendPropertyChanging("IDBRANCH");
                    this._IDBRANCH = value;
                    this.SendPropertyChanged("IDBRANCH");
                    this.OnIDBRANCHChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for STATUS in the schema.
        /// </summary>
        [Column(Storage = "_STATUS", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public int? STATUS
        {
            get
            {
                return this._STATUS;
            }
            set
            {
                if (this._STATUS != value)
                {
                    this.OnSTATUSChanging(value);
                    this.SendPropertyChanging("STATUS");
                    this._STATUS = value;
                    this.SendPropertyChanged("STATUS");
                    this.OnSTATUSChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Branch in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Branch_UserStaff", Storage="_Branch", ThisKey="IDBRANCH", OtherKey="ID", IsForeignKey=true)]
        public Branch Branch
        {
            get
            {
                return this._Branch.Entity;
            }
            set
            {
                Branch previousValue = this._Branch.Entity;
                if ((previousValue != value) || (this._Branch.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Branch");
                    if (previousValue != null)
                    {
                        this._Branch.Entity = null;
                        previousValue.UserStaffs.Remove(this);
                    }
                    this._Branch.Entity = value;
                    if (value != null)
                    {
                        this._IDBRANCH = value.ID;
                        value.UserStaffs.Add(this);
                    }
                    else
                    {
                        this._IDBRANCH = default(int);
                    }
                    this.SendPropertyChanged("Branch");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Staff in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="Staff_UserStaff", Storage="_Staff", ThisKey="IDSTAFF", OtherKey="ID", IsForeignKey=true)]
        public Staff Staff
        {
            get
            {
                return this._Staff.Entity;
            }
            set
            {
                Staff previousValue = this._Staff.Entity;
                if ((previousValue != value) || (this._Staff.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("Staff");
                    if (previousValue != null)
                    {
                        this._Staff.Entity = null;
                        previousValue.UserStaffs.Remove(this);
                    }
                    this._Staff.Entity = value;
                    if (value != null)
                    {
                        this._IDSTAFF = value.ID;
                        value.UserStaffs.Add(this);
                    }
                    else
                    {
                        this._IDSTAFF = default(int);
                    }
                    this.SendPropertyChanged("Staff");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="User_UserStaff", Storage="_User", ThisKey="USERNAME", OtherKey="USERNAME", IsForeignKey=true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if ((previousValue != value) || (this._User.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("User");
                    if (previousValue != null)
                    {
                        this._User.Entity = null;
                        previousValue.UserStaffs.Remove(this);
                    }
                    this._User.Entity = value;
                    if (value != null)
                    {
                        this._USERNAME = value.USERNAME;
                        value.UserStaffs.Add(this);
                    }
                    else
                    {
                        this._USERNAME = default(string);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
